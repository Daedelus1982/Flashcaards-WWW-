type: edu
files:
  - name: src/index.html
    visible: true
    text: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <title>Flashcards</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="styles.css">
      </head>
      <body>
      <div id="main">
        <h1>What is the capital of...</h1>
        <div class="card-holder">
          <div class="card">
            <p>Portugal</p>
          </div>
          <div class="card">
            <p>Peru</p>
          </div>
          <div class="card">
            <p>Canada</p>
          </div>
          <div class="card">
            <p>Kenya</p>
          </div>
          <div class="card">
            <p>Morocco</p>
          </div>
          <div class="card">
            <p>Sweden</p>
          </div>
          <div class="card">
            <p>Iran</p>
          </div>
          <div class="card">
            <p>Croatia</p>
          </div>
          <div class="card">
            <p>Czech Republic</p>
          </div>
        </div>
      </div>
      </body>
      </html>
    learner_created: false
  - name: src/styles.css
    visible: true
    text: |-
      body {
        display: flex;
        justify-content: center;
      }
      
      #main {
        display: flex;
        flex-direction: column;
        background-image: url("world.png");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        border-radius: 40px;
        width: 85vw;
        height: 85vh;
      }
      
      h1 {
        background-color: dodgerblue;
        border-radius: 30px;
        color: #FFF;
        font-family: 'Poppins', sans-serif;
        font-size: 32px;
        font-weight: 700;
        margin: 40px auto;
        padding: 10px;
        text-align: center;
        width: 50%;
      }
      
      .card-holder {
        background-color: rgba(250, 235, 215, .8);
        border-radius: 20px;
        display: grid;
        gap: 15px;
        grid-template-rows: 1fr 1fr 1fr;
        grid-template-columns: 1fr 1fr 1fr;
        margin: 10px auto auto auto;
        padding: 20px;
        place-items: start center;
        width: 30%;
      }
      
      .card {
        align-items: flex-start;
        background-color: dodgerblue;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        width: 100px;
        height: 100px;
        padding: 2px;
      }
      
       .card > p {
         background-color: #FF7F50;
         border-radius: 10px;
         color: #FFF;
         font-family: 'Poppins', sans-serif;
         font-size: 16px;
         font-weight: 400;
         margin: 10px auto;
         padding: 5px;
         text-align: center;
         width: 75%;
       }
    learner_created: false
  - name: test/test.js
    visible: false
    text: |+
      const path = require('path');
      const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
      const {StageTest, correct, wrong} = require('hs-test-web');
      
      class FlashcardsTest extends StageTest {
      
          page = this.getPage(pagePath)
      
          tests = [
              this.page.execute(() => {
                  let h1 = document.body.getElementsByTagName("h1");
      
                  if (h1.length === 0) return wrong("There should be h1 element on the page.");
                  if (h1.length > 1) return wrong("There should be only one h1 element on the page.");
                  if (!h1[0].innerText) return wrong("The h1 element should contain text.");
      
                  let font = window.getComputedStyle(h1[0]).fontFamily;
                  if (font === '"serif"' || font === '"Times New Roman"') return wrong("The text inside the h1 element should have a font different from 'serif' and 'Times New Roman'.");
      
                  return correct()
              }),
              this.page.execute(() => {
                  let divs = document.body.getElementsByTagName("div");
                  let blocksCounter = 0;
      
                  for (let div of divs) {
                      if (div.children.length === 9) {
                          const display = window.getComputedStyle(div).display;
                          if (display && (display.toLowerCase() === 'flex' || display.toLowerCase() === 'grid')) {
                              return correct();
                          } else {
                              return wrong("The CSS property display: flex or display: grid should be set to the element with 9 div elements inside.");
                          }
                      } else if (div.children && div.children.length === 3 &&
                          div.children[0].children && div.children[0].children.length === 3) {
                          for (let divBlockOfThree of div.children) {
                              const display = window.getComputedStyle(divBlockOfThree).display;
                              const flexDirection = window.getComputedStyle(divBlockOfThree).flexDirection;
                              if (display && display.toLowerCase() === 'flex' &&
                                  flexDirection && flexDirection.toLowerCase() === 'row') {
                                  blocksCounter++;
                              } else {
                                  return wrong("The CSS property display: flex and flex-direction: row should be set to the element with 3 div elements inside.");
                              }
                          }
                      }
                  }
      
                  return blocksCounter === 3 ? correct() : wrong("There should be an element with 9 div elements inside or 3 container divs each containing 3 div elements inside it.");
              }),
              this.page.execute(() => {
                  let divs = document.body.getElementsByTagName("div");
                  let cards = [];
                  for (let div of divs) {
                      if (div.children.length === 9) {
                          for (let card of Array.from(div.children)) {
                              cards.push(card);
                          }
                      } else if (div.children && div.children.length === 3 &&
                          div.children[0].children && div.children[0].children.length === 3) {
                          for (let divBlockOfThree of div.children) {
                              for (let card of divBlockOfThree.children) {
                                  cards.push(card);
                              }
      
                          }
                      }
                  }
      
                  let k = 0;
                  for (let card of cards) {
                      if (card.children[0] && card.children[0].tagName.toLowerCase() === 'div' && card.children[0].children.length === 2) {
                          for (let sideDir of card.children[0].children) {
                              if (sideDir.children[0] && sideDir.children[0].tagName && sideDir.children[0].tagName.toLowerCase() === 'p') {
                                  let font = window.getComputedStyle(sideDir.children[0]).fontFamily;
                                  if (font === '"serif"' || font === '"Times New Roman"') {
                                      return wrong("Text on cards should have font different from 'serif' and 'Times New Roman'");
                                  } else {
                                      k++;
                                  }
                              } else {
                                  return wrong("All text on the cards should be in 'p' element");
                              }
                          }
                      } else {
                          return wrong("Each card should have suggested structure: 1 container div containing main card div, which in turn contains 2 more divs inside it for both sides.");
                      }
                  }
      
                  return k !== 18 ? wrong("There should be 2 p elements for each of the cards") : correct();
              }),
              this.page.execute(() => {
                  let divs = document.body.getElementsByTagName("div");
                  let cardsH = [];
                  let cardsL = [];
                  for (let div of divs) {
                      if (div.children && div.children.length === 9) {
                          for (let cardDiv of div.children) {
                              let styles = window.getComputedStyle(cardDiv);
                              if (styles.width === styles.height) {
                                  let left = cardDiv.getBoundingClientRect().left;
                                  let top = cardDiv.getBoundingClientRect().top;
                                  if (!cardsH.includes(top)) {
                                      cardsH.push(top);
                                  }
                                  if (!cardsL.includes(left)) {
                                      cardsL.push(left);
                                  }
      
                                  if (!styles.backgroundColor && !styles.backgroundImage)
                                      return wrong("Each card should have a background.")
                              }
                          }
                      } else if (div.children && div.children.length === 3 &&
                          div.children[0].children && div.children[0].children.length === 3) {
                          for (let divBlockOfThree of div.children) {
                              for (let cardDiv of divBlockOfThree.children) {
                                  let styles = window.getComputedStyle(cardDiv);
                                  if (styles.width === styles.height) {
                                      let left = cardDiv.getBoundingClientRect().left;
                                      let top = cardDiv.getBoundingClientRect().top;
                                      if (!cardsH.includes(top)) {
                                          cardsH.push(top);
                                      }
                                      if (!cardsL.includes(left)) {
                                          cardsL.push(left);
                                      }
      
                                      if (!styles.backgroundColor && !styles.backgroundImage)
                                          return wrong("Each card should have a background.")
                                  }
                              }
                          }
                      }
                  }
      
                  return cardsH.length === 3 && cardsL.length === 3 ? correct() :
                      wrong("The cards should form a table 3x3 and each of them should have equal width and height.")
              }),
              this.page.execute(() => {
                  let h1 = document.body.getElementsByTagName("h1")[0];
                  if (h1 && h1.parentElement) {
                      let parentStyles = window.getComputedStyle(h1.parentElement);
                      if (parentStyles.backgroundColor !== 'rgba(0, 0, 0, 0)' ||
                          parentStyles.backgroundImage !== 'none') {
                          return correct();
                      }
                  }
      
                  let bodyStyles = window.getComputedStyle(document.body);
                  if (bodyStyles.backgroundColor !== 'rgba(0, 0, 0, 0)' ||
                      bodyStyles.backgroundImage !== 'none') {
      
                      return correct();
                  }
      
                  return wrong("The element that contains header and cards should have a background.\n" +
                      "Please, make sure you set a background as CSS property.");
              })
          ]
      
      }
      
      
      it('Test stage', async function () {
          try {
              this.timeout(30000)
          } catch (ignored) {
          }
          await new FlashcardsTest().runTests()
      }, 30000)
    
    learner_created: false
  - name: src/world.png
    visible: true
    learner_created: true
  - name: src/passes-tests.html
    visible: true
    learner_created: true
  - name: src/passes-teststemp.html
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/115/stages/627/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 20 Nov 2023 18:46:16 UTC"
record: -1
